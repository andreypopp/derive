#!/usr/bin/env node
/**
 * @author Andrey Popp <8mayday@gmail.com>
 * @license MIT
 */

let yargs = require('yargs');
let ProgressPlugin = require('../lib/ProgressPlugin');
let Report = require('../lib/Report');
let Config = require('../lib/Config');

const context = process.cwd();

let argv = yargs
  .help('help')
  .alias('help', 'h')
  .options({
    'config': {
      type: 'string',
      global: true,
      alias: 'c',
      describe: 'Path to the config file',
      defaultDescription: 'derive.config.js',
      requiresArg: true
    },
  })
  .command('build [-w] [-p]', 'Build',
    yargs => yargs
      .options({
        'watch': {
          type: 'boolean',
          alias: 'w',
          describe: 'Watch the filesystem for changes',
        },
        'production': {
          type: 'boolean',
          alias: 'p',
          describe: 'Produce a production build',
        },
      })
      .strict(),
    withConfig(buildCommand)
  )
  .command('serve', 'Serve',
    yargs => yargs
      .options({
        'host': {
          type: 'string',
          default: 'localhost',
          describe: 'Host',
        },
        'port': {
          type: 'number',
          default: 3000,
          describe: 'Port',
        },
      })
      .strict(),
    withConfig(serveCommand)
  )
  .strict().argv;

if (argv._.length === 0) {
  withConfig(buildCommand)(argv);
}

function withConfig(command) {
  return argv => {
    let options = {context};
    if (argv.config) {
      let config = Config.loadConfig(context, options.config);
      if (config === null) {
        console.error('error: cannot load config file', options.config);
        exit(1);
      }
      options = Object.assign(
        {}, options, config);
    } else {
      options = Object.assign(
        {}, options, Config.loadConfig(context, 'derive.config.js'));
    }
    command(argv, options);
  };
}

function serveCommand(argv, options) {

  let Webpack = require('webpack');
  let WebpackServer = require('webpack-dev-server');
  let HTMLPlugin = require('html-webpack-plugin');

  options.plugins.push(new ProgressPlugin());
  options.plugins.push(new HTMLPlugin());

  let compiler = Webpack(options);

  let server = new WebpackServer(compiler, {
    outputPath: '/',
    quiet: true,
  }).listen(argv.port, argv.host, err => {
    if (err) {
      throw err;
    }
  });


  compiler.plugin('done', stats => {
    Report.printReport(stats, options);
  });

  compiler.plugin('fail', stats => {
    Report.printReport(stats, options);
  });
}

function buildCommand(argv, options) {

  let Webpack = require('webpack');

  if (argv.watch) {
    options.watch = true;
  }

  Error.stackTraceLimit = 30;

  if (options.watch) {
    options.plugins.push(new ProgressPlugin());
  }

  let compiler = Webpack(options);

  function onDone(err, stats) {
    if (err) {

      console.error(err.stack || err);
      if (err.details) {
        console.error(err.details);
      }
      if (!options.watch) {
        exit(1);
      }
    } else {

      Report.printReport(stats, options);

      if (!options.watch && stats.hasErrors()) {
        exit(2);
      }
    }

    if (!options.watch) {
      // Do not keep cache anymore
      compiler.purgeInputFileSystem();
    }

  }

  if (options.watch) {
    let watchOptions = options.watchOptions || options.watch || {};
    compiler.watch(watchOptions, onDone);
  } else {
    compiler.run(onDone);
  }
}

function exit(code = 0) {
  process.on('exit', () => process.exit(code));
}
