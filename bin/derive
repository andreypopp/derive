#!/usr/bin/env node
/**
 * @author Andrey Popp <8mayday@gmail.com>
 * @license MIT
 */

let fs = require('fs');
let path = require('path');
let yargs = require('yargs');

const VIEW_COMPONENT_LOADER = require.resolve('../lib/view-component-loader');
const WEBPACK_DEV_SERVER_CLIENT = require.resolve('webpack-dev-server/client');
const WEBPACK_DEV_SERVER_HOT = require.resolve('webpack/hot/dev-server');

const context = process.cwd();

let argv = yargs
  .help('help')
  .alias('help', 'h')
  .options({
    'config': {
      type: 'string',
      global: true,
      alias: 'c',
      describe: 'Path to the config file',
      defaultDescription: 'derive.config.js',
      requiresArg: true
    },
  })
  .command(
    'build [-w] [-p]',
    'Build',
    yargs => yargs
      .options({
        'watch': {
          type: 'boolean',
          alias: 'w',
          describe: 'Watch the filesystem for changes',
        },
        'progress': {
          type: 'boolean',
          default: true,
          describe: 'Report progress (only when --watch is active)',
        },
        'check': {
          type: 'boolean',
          describe: 'Report code analysis',
        },
        'production': {
          type: 'boolean',
          alias: 'p',
          describe: 'Produce a production build',
        },
      })
      .strict(),
    withConfig(buildCommand)
  )
  .command(
    'serve',
    'Serve',
    yargs => yargs
      .options({
        'host': {
          type: 'string',
          default: 'localhost',
          describe: 'Host',
        },
        'port': {
          type: 'number',
          default: 3000,
          describe: 'Port',
        },
        'progress': {
          type: 'boolean',
          default: true,
          describe: 'Report progress',
        },
        'check': {
          type: 'boolean',
          describe: 'Report code analysis',
        },
        'hmr': {
          type: 'boolean',
          describe: 'Enable hot module replacement',
        },
      })
      .strict(),
    withConfig(serveCommand)
  )
  .command(
    'view-component <component-module>',
    'Render React component',
    yargs => yargs
      .options({
        'host': {
          type: 'string',
          default: 'localhost',
          describe: 'Host',
        },
        'progress': {
          type: 'boolean',
          default: true,
          describe: 'Report progress',
        },
        'port': {
          type: 'number',
          default: 3000,
          describe: 'Port',
        },
        'check': {
          type: 'boolean',
          describe: 'Report code analysis',
        },
        'hmr': {
          type: 'boolean',
          describe: 'Enable hot module replacement',
        },
      })
      .strict(),
    withConfig(viewComponentCommand)
  )
  .command(
    'check',
    'Check code possible errors',
    yargs => yargs
      .option({
        'watch': {
          type: 'boolean',
          alias: 'w',
          describe: 'Watch the filesystem for changes',
        },
        'progress': {
          type: 'boolean',
          default: true,
          describe: 'Report progress (only when --watch is active)',
        },
      })
      .strict(),
    withConfig(checkCommand)
  )
  .demand(1)
  .strict().argv;

function withConfig(command) {
  return argv => {

    let Config = require('../lib/Config');

    let options = {context};
    if (argv.config) {
      let config = Config.loadConfig(context, options.config);
      if (config === null) {
        console.error('error: cannot load config file', options.config);
        exit(1);
      }
      options = Object.assign(
        {}, options, config);
    } else {
      options = Object.assign(
        {}, options, Config.loadConfig(context, 'derive.config.js'));
    }
    command(argv, options);
  };
}

function viewComponentCommand(argv, options) {

  let Webpack = require('webpack');
  let WebpackServer = require('webpack-dev-server');
  let ProgressPlugin = require('../lib/ProgressPlugin');
  let ReportPlugin = require('../lib/ReportPlugin');
  let HTMLPlugin = require('html-webpack-plugin');
  let HotModuleReplacementPlugin = require('webpack/lib/HotModuleReplacementPlugin');

  if (argv.progress) {
    options.plugins.push(new ProgressPlugin());
  }
  options.plugins.push(new ReportPlugin());
  options.plugins.push(new HTMLPlugin({
    title: 'View Component',
    template: require.resolve('../lib/view-component-template.html'),
  }));

  options.plugins.push(new Webpack.DllReferencePlugin({
    context: path.join(__dirname, '..', 'react-dev-dll'),
    manifest: require('../react-dev-dll/react_dev-manifest.json'),
  }));

  options.entry = [
    VIEW_COMPONENT_LOADER + '!' + argv['component-module'],
  ];

  if (argv.hmr) {
    options.plugins.push(new HotModuleReplacementPlugin());
    options.entry.unshift(
      WEBPACK_DEV_SERVER_CLIENT + `?http://${argv.host}:${argv.port}`,
      WEBPACK_DEV_SERVER_HOT
    )
  }

  if (argv.check && options.check) {
    options.plugins = options.plugins.concat(
      configureCheckPlugin(options.check, options.context));
  }

  let compiler = Webpack(options);

  let server = new WebpackServer(compiler, {
    outputPath: '/',
    quiet: true,
    hot: argv.hmr,
  });

  server.app.get('/__react-dev-dll__.js', (req, res) => {
    let filename = path.join(__dirname, '..', 'react-dev-dll', 'react_dev.js')
    fs.createReadStream(filename).pipe(res);
  });

  server.listen(argv.port, argv.host, err => {
    if (err) {
      throw err;
    }
  });
}

function serveCommand(argv, options) {

  let Webpack = require('webpack');
  let WebpackServer = require('webpack-dev-server');
  let ProgressPlugin = require('../lib/ProgressPlugin');
  let ReportPlugin = require('../lib/ReportPlugin');
  let HTMLPlugin = require('html-webpack-plugin');

  if (argv.hmr) {
    options.plugins.push(new HotModuleReplacementPlugin());
    options.entry.unshift(
      WEBPACK_DEV_SERVER_CLIENT + `?http://${argv.host}:${argv.port}`,
      WEBPACK_DEV_SERVER_HOT
    )
  }

  if (argv.progress) {
    options.plugins.push(new ProgressPlugin());
  }
  options.plugins.push(new ReportPlugin());
  options.plugins.push(new HTMLPlugin());

  if (argv.check && options.check) {
    options.plugins = options.plugins.concat(
      configureCheckPlugin(options.check, options.context));
  }

  let compiler = Webpack(options);

  let server = new WebpackServer(compiler, {
    outputPath: '/',
    quiet: true,
    hot: argv.hmr,
  }).listen(argv.port, argv.host, err => {
    if (err) {
      throw err;
    }
  });
}

function configureCheckPlugin(check, context) {
  let Config = require('../lib/Config');
  let CheckPlugin = require('../lib/CheckPlugin');

  let pluginList = [];
  for (let pattern in check) {
    let loader = Config.resolveLoader(check[pattern], context);
    pluginList.push(new CheckPlugin({
      context: context,
      pattern, loader
    }));
  }
  return pluginList;
}

function checkCommand(argv, options) {

  let Webpack = require('webpack');
  let ProgressPlugin = require('../lib/ProgressPlugin');
  let ReportPlugin = require('../lib/ReportPlugin');

  if (argv.watch) {
    options.watch = true;
  }

  if (options.watch && argv.progress) {
    options.plugins.push(new ProgressPlugin());
  }
  options.plugins.push(new ReportPlugin());
  if (options.check) {
    options.plugins = options.plugins.concat(
      configureCheckPlugin(options.check, options.context));
  }

  options.entry = undefined;

  let compiler = Webpack(options);

  function onDone(err, stats) {
    if (err) {
      console.error(err.stack || err);
      if (err.details) {
        console.error(err.details);
      }
      if (!options.watch) {
        exit(1);
      }
    } else {
      if (!options.watch && stats.hasErrors()) {
        exit(2);
      }
    }

    if (!options.watch) {
      // Do not keep cache anymore
      compiler.purgeInputFileSystem();
    }

  }

  if (options.watch) {
    let watchOptions = options.watchOptions || options.watch || {};
    compiler.watch(watchOptions, onDone);
  } else {
    compiler.run(onDone);
  }
}

function buildCommand(argv, options) {

  let Webpack = require('webpack');
  let ProgressPlugin = require('../lib/ProgressPlugin');
  let ReportPlugin = require('../lib/ReportPlugin');

  if (argv.watch) {
    options.watch = true;
  }

  Error.stackTraceLimit = 30;

  if (options.watch && argv.progress) {
    options.plugins.push(new ProgressPlugin());
  }
  options.plugins.push(new ReportPlugin());

  if (argv.check && options.check) {
    options.plugins = options.plugins.concat(
      configureCheckPlugin(options.check, options.context));
  }

  let compiler = Webpack(options);

  function onDone(err, stats) {
    if (err) {
      console.error(err.stack || err);
      if (err.details) {
        console.error(err.details);
      }
      if (!options.watch) {
        exit(1);
      }
    } else {
      if (!options.watch && stats.hasErrors()) {
        exit(2);
      }
    }

    if (!options.watch) {
      // Do not keep cache anymore
      compiler.purgeInputFileSystem();
    }

  }

  if (options.watch) {
    let watchOptions = options.watchOptions || options.watch || {};
    compiler.watch(watchOptions, onDone);
  } else {
    compiler.run(onDone);
  }
}

function exit(code = 0) {
  process.on('exit', () => process.exit(code));
}
